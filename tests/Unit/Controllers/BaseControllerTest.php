<?php

namespace Mathrix\Lumen\Unit\Controllers;

use Exception;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Mathrix\Lumen\Zero\Controllers\BaseController;
use Mathrix\Lumen\Zero\Dictionaries\FruitDictionary;
use Mathrix\Lumen\Zero\Models\BaseModel;
use Mathrix\Lumen\Zero\Tests\Traits\ReflectorTrait;
use Mathrix\Lumen\Zero\Utils\ClassResolver;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * Class BaseControllerTest.
 *
 * @author Mathieu Bour <mathieu@mathrix.fr>
 * @copyright Mathrix Education SA.
 * @since 2.0.0
 */
class BaseControllerTest extends TestCase
{
    use ReflectorTrait;

    /** @var MockObject|BaseController $subject */
    private $subject;


    /**
     * Mock a call to BaseController::prepareRESTRequest(). Model class is autogenerated.
     *
     * @param string $method The method.
     * @param string $uri The uri.
     * @param string $modelKey The associated model class key.
     *
     * @return array
     */
    public function prepareRESTRequest(string $method, string $uri, string $modelKey = "id")
    {
        try {
            // Initialize FruitsController and Fruit model
            $fruit = Str::singular(FruitDictionary::random(true));
            $controllerName = Str::plural($fruit) . "Controller";
            $namespace = ClassResolver::$ModelsNamespace;
            $modelClass = "$namespace\\$fruit";

            $request = Request::create($uri, $method);

            // Manually Fruit model
            $model = sprintf(
                'namespace %s;class %s extends \\%s { public $primaryKey = "%s"; public function users() {}}',
                $namespace, $fruit, BaseModel::class, $modelKey
            );
            eval($model);

            // Mock FruitController
            $subject = $this->getMockForAbstractClass(
                BaseController::class,
                [],
                $controllerName,
                false
            );

            // Force request
            $this->set($subject, "request", $request);
            $this->set($subject, "modelClass", $modelClass);

            return $this->invoke($subject, "prepareRESTRequest", []);
        } catch (Exception $e) {
            // Silent exception, we do not nee this here
            $this->fail($e->getMessage());

            return null;
        }
    }


    /**
     * @covers \Mathrix\Lumen\Controllers\BaseController::prepareRESTRequest
     */
    public function testPrepareRESTRequest()
    {
        $args = $this->prepareRESTRequest("get", "/fruits");
        $this->assertEquals(["standardIndex", []], $args);

        Collection::make(["get", "patch", "delete"])->each(function (string $method) {
            $args = $this->prepareRESTRequest($method, "/fruits/17");
            $this->assertEquals(["standard" . ucfirst($method), ["id", "17"]], $args);

            $args = $this->prepareRESTRequest($method, "/fruits/f5b678a8-c43d-40bc-aaf4-8a0f3909177d", "uuid");
            $this->assertEquals(["standard" . ucfirst($method), ["uuid", "f5b678a8-c43d-40bc-aaf4-8a0f3909177d"]], $args);

            $args = $this->prepareRESTRequest($method, "/fruits/slug/golden");
            $this->assertEquals(["standard" . ucfirst($method), ["slug", "golden"]], $args);
        });

        Collection::make(["get", "patch"])->each(function (string $method) {
            $args = $this->prepareRESTRequest($method, "/fruits/17/users");
            $this->assertEquals(["relation" . ucfirst($method), ["id", "17", "users"]], $args);

            $args = $this->prepareRESTRequest($method, "/fruits/f5b678a8-c43d-40bc-aaf4-8a0f3909177d/users", "uuid");
            $this->assertEquals(["relation" . ucfirst($method), ["uuid", "f5b678a8-c43d-40bc-aaf4-8a0f3909177d", "users"]], $args);

            $args = $this->prepareRESTRequest($method, "/fruits/slug/golden/users");
            $this->assertEquals(["relation" . ucfirst($method), ["slug", "golden", "users"]], $args);
        });
    }
}
