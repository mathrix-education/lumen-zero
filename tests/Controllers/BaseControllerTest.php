<?php

namespace Mathrix\Lumen\Controllers;

use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Mathrix\Lumen\Zero\Controllers\BaseController;
use Mathrix\Lumen\Zero\Testing\Dictionaries\Dictionary;
use Mathrix\Lumen\Zero\Testing\ModelMockFactory;
use Mathrix\Lumen\Zero\Testing\Traits\ReflectorTrait;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;
use ReflectionException;

/**
 * Class BaseControllerTest.
 *
 * @author Mathieu Bour <mathieu@mathrix.fr>
 * @copyright Mathrix Education SA.
 * @since 2.0.0
 */
class BaseControllerTest extends TestCase
{
    use ReflectorTrait;

    /** @var MockObject|BaseController $subject */
    private $subject;


    /**
     * @return array
     * @throws Exception
     */
    public function prepareRESTRequestDataProvider()
    {
        $id = "17";
        $uuid = "f5b678a8-c43d-40bc-aaf4-8a0f3909177d";
        $slug = "super-slug";
        $relation = "brands";

        $data = [
            [
                ["standardIndex", []],
                "get", "/fruits"
            ]
        ];

        foreach (["get", "patch", "delete"] as $method) {
            $Method = ucfirst($method);

            $data[] = [
                ["standard$Method", ["id", $id]],
                $method, "/fruits/$id"
            ];
            $data[] = [
                ["standard$Method", ["uuid", $uuid]],
                $method, "/fruits/$uuid", "uuid"
            ];
            $data[] = [
                ["standard$Method", ["slug", $slug]],
                $method, "/fruits/slug/$slug"
            ];
        }

        foreach (["get", "patch"] as $method) {
            $Method = ucfirst($method);

            $data[] = [
                ["relation$Method", ["id", $id, $relation]],
                $method, "/fruits/$id/$relation"
            ];
            $data[] = [
                ["relation$Method", ["uuid", $uuid, $relation]],
                $method, "/fruits/$uuid/$relation", "uuid"
            ];
            $data[] = [
                ["relation$Method", ["slug", $slug, $relation]],
                $method, "/fruits/slug/$slug/$relation"
            ];
        }

        return $data;
    }


    /**
     * Mock a call to BaseController::prepareRESTRequest(). Model class is autogenerated.
     *
     * @param array $expected The expected arguments.
     * @param string $method The method.
     * @param string $uri The uri.
     * @param string $modelKey The associated model class key.
     *
     * @throws ReflectionException
     * @throws Exception
     *
     * @dataProvider prepareRESTRequestDataProvider
     * @covers       \Mathrix\Lumen\Controllers\BaseController::prepareRESTRequest
     */
    public function testPrepareRESTRequest(array $expected, string $method, string $uri, string $modelKey = "id"): void
    {
        $dictionary = new Dictionary();
        $model = Str::ucfirst($dictionary->random());
        $controllerName = "{$model}Controller";

        $modelClass = ModelMockFactory::make()
            ->setName($model)
            ->setMethod("public", "getKeyName", $modelKey)
            ->setMethod("public", "brands", null)
            ->compile()
            ->exec()
            ->getClass();

        $request = Request::create($uri, $method);

        // Mock FruitController
        $subject = $this->getMockForAbstractClass(
            BaseController::class,
            [],
            $controllerName,
            false
        );

        // Force request
        $this->set($subject, "request", $request);
        $this->set($subject, "modelClass", $modelClass);

        $args = $this->invoke($subject, "prepareRESTRequest", []);

        $this->assertEquals($expected, $args);
    }
}
